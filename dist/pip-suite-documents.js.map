{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../node_modules/async/lib/async.js","../node_modules/process/browser.js","../node_modules/timers-browserify/main.js","src/add_documents/AddDocument.ts","src/data/Attachment.ts","src/data/BlobInfo.ts","src/data/DataPage.ts","src/data/DocumentDataService.ts","src/data/IDocumentDataService.ts","src/data/index.ts","src/document_list/DocumentList.ts","src/document_list_edit/DocumentListEdit.ts","src/document_url_dialog/DocumentUrlDialogService.ts","src/index.ts","src/rest/DocumentResources.ts","src/rest/FileResources.ts","src/rest/index.ts","temp/pip-suite-documents-html.min.js"],"names":[],"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","file":"pip-suite-documents.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n(function () {\n\n    var async = {};\n    function noop() {}\n    function identity(v) {\n        return v;\n    }\n    function toBool(v) {\n        return !!v;\n    }\n    function notId(v) {\n        return !v;\n    }\n\n    // global on the server, window in the browser\n    var previous_async;\n\n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self === 'object' && self.self === self && self ||\n            typeof global === 'object' && global.global === global && global ||\n            this;\n\n    if (root != null) {\n        previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        return function() {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    function _once(fn) {\n        return function() {\n            if (fn === null) return;\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    // Ported from underscore.js isObject\n    var _isObject = function(obj) {\n        var type = typeof obj;\n        return type === 'function' || type === 'object' && !!obj;\n    };\n\n    function _isArrayLike(arr) {\n        return _isArray(arr) || (\n            // has a positive integer length property\n            typeof arr.length === \"number\" &&\n            arr.length >= 0 &&\n            arr.length % 1 === 0\n        );\n    }\n\n    function _arrayEach(arr, iterator) {\n        var index = -1,\n            length = arr.length;\n\n        while (++index < length) {\n            iterator(arr[index], index, arr);\n        }\n    }\n\n    function _map(arr, iterator) {\n        var index = -1,\n            length = arr.length,\n            result = Array(length);\n\n        while (++index < length) {\n            result[index] = iterator(arr[index], index, arr);\n        }\n        return result;\n    }\n\n    function _range(count) {\n        return _map(Array(count), function (v, i) { return i; });\n    }\n\n    function _reduce(arr, iterator, memo) {\n        _arrayEach(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    }\n\n    function _forEachOf(object, iterator) {\n        _arrayEach(_keys(object), function (key) {\n            iterator(object[key], key);\n        });\n    }\n\n    function _indexOf(arr, item) {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    }\n\n    var _keys = Object.keys || function (obj) {\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    function _keyIterator(coll) {\n        var i = -1;\n        var len;\n        var keys;\n        if (_isArrayLike(coll)) {\n            len = coll.length;\n            return function next() {\n                i++;\n                return i < len ? i : null;\n            };\n        } else {\n            keys = _keys(coll);\n            len = keys.length;\n            return function next() {\n                i++;\n                return i < len ? keys[i] : null;\n            };\n        }\n    }\n\n    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)\n    // This accumulates the arguments passed into an array, after a given index.\n    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).\n    function _restParam(func, startIndex) {\n        startIndex = startIndex == null ? func.length - 1 : +startIndex;\n        return function() {\n            var length = Math.max(arguments.length - startIndex, 0);\n            var rest = Array(length);\n            for (var index = 0; index < length; index++) {\n                rest[index] = arguments[index + startIndex];\n            }\n            switch (startIndex) {\n                case 0: return func.call(this, rest);\n                case 1: return func.call(this, arguments[0], rest);\n            }\n            // Currently unused but handle cases outside of the switch statement:\n            // var args = Array(startIndex + 1);\n            // for (index = 0; index < startIndex; index++) {\n            //     args[index] = arguments[index];\n            // }\n            // args[startIndex] = rest;\n            // return func.apply(this, args);\n        };\n    }\n\n    function _withoutIndex(iterator) {\n        return function (value, index, callback) {\n            return iterator(value, callback);\n        };\n    }\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n\n    // capture the global reference to guard against fakeTimer mocks\n    var _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\n    var _delay = _setImmediate ? function(fn) {\n        // not a direct alias for IE10 compatibility\n        _setImmediate(fn);\n    } : function(fn) {\n        setTimeout(fn, 0);\n    };\n\n    if (typeof process === 'object' && typeof process.nextTick === 'function') {\n        async.nextTick = process.nextTick;\n    } else {\n        async.nextTick = _delay;\n    }\n    async.setImmediate = _setImmediate ? _delay : async.nextTick;\n\n\n    async.forEach =\n    async.each = function (arr, iterator, callback) {\n        return async.eachOf(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachSeries =\n    async.eachSeries = function (arr, iterator, callback) {\n        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);\n    };\n\n\n    async.forEachLimit =\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachOf =\n    async.eachOf = function (object, iterator, callback) {\n        callback = _once(callback || noop);\n        object = object || [];\n\n        var iter = _keyIterator(object);\n        var key, completed = 0;\n\n        while ((key = iter()) != null) {\n            completed += 1;\n            iterator(object[key], key, only_once(done));\n        }\n\n        if (completed === 0) callback(null);\n\n        function done(err) {\n            completed--;\n            if (err) {\n                callback(err);\n            }\n            // Check key is null in case iterator isn't exhausted\n            // and done resolved synchronously.\n            else if (key === null && completed <= 0) {\n                callback(null);\n            }\n        }\n    };\n\n    async.forEachOfSeries =\n    async.eachOfSeries = function (obj, iterator, callback) {\n        callback = _once(callback || noop);\n        obj = obj || [];\n        var nextKey = _keyIterator(obj);\n        var key = nextKey();\n        function iterate() {\n            var sync = true;\n            if (key === null) {\n                return callback(null);\n            }\n            iterator(obj[key], key, only_once(function (err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    key = nextKey();\n                    if (key === null) {\n                        return callback(null);\n                    } else {\n                        if (sync) {\n                            async.setImmediate(iterate);\n                        } else {\n                            iterate();\n                        }\n                    }\n                }\n            }));\n            sync = false;\n        }\n        iterate();\n    };\n\n\n\n    async.forEachOfLimit =\n    async.eachOfLimit = function (obj, limit, iterator, callback) {\n        _eachOfLimit(limit)(obj, iterator, callback);\n    };\n\n    function _eachOfLimit(limit) {\n\n        return function (obj, iterator, callback) {\n            callback = _once(callback || noop);\n            obj = obj || [];\n            var nextKey = _keyIterator(obj);\n            if (limit <= 0) {\n                return callback(null);\n            }\n            var done = false;\n            var running = 0;\n            var errored = false;\n\n            (function replenish () {\n                if (done && running <= 0) {\n                    return callback(null);\n                }\n\n                while (running < limit && !errored) {\n                    var key = nextKey();\n                    if (key === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iterator(obj[key], key, only_once(function (err) {\n                        running -= 1;\n                        if (err) {\n                            callback(err);\n                            errored = true;\n                        }\n                        else {\n                            replenish();\n                        }\n                    }));\n                }\n            })();\n        };\n    }\n\n\n    function doParallel(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOf, obj, iterator, callback);\n        };\n    }\n    function doParallelLimit(fn) {\n        return function (obj, limit, iterator, callback) {\n            return fn(_eachOfLimit(limit), obj, iterator, callback);\n        };\n    }\n    function doSeries(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOfSeries, obj, iterator, callback);\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iterator, callback) {\n        callback = _once(callback || noop);\n        arr = arr || [];\n        var results = _isArrayLike(arr) ? [] : {};\n        eachfn(arr, function (value, index, callback) {\n            iterator(value, function (err, v) {\n                results[index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = doParallelLimit(_asyncMap);\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.inject =\n    async.foldl =\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachOfSeries(arr, function (x, i, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n\n    async.foldr =\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, identity).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n\n    async.transform = function (arr, memo, iterator, callback) {\n        if (arguments.length === 3) {\n            callback = iterator;\n            iterator = memo;\n            memo = _isArray(arr) ? [] : {};\n        }\n\n        async.eachOf(arr, function(v, k, cb) {\n            iterator(memo, v, k, cb);\n        }, function(err) {\n            callback(err, memo);\n        });\n    };\n\n    function _filter(eachfn, arr, iterator, callback) {\n        var results = [];\n        eachfn(arr, function (x, index, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            });\n        }, function () {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    }\n\n    async.select =\n    async.filter = doParallel(_filter);\n\n    async.selectLimit =\n    async.filterLimit = doParallelLimit(_filter);\n\n    async.selectSeries =\n    async.filterSeries = doSeries(_filter);\n\n    function _reject(eachfn, arr, iterator, callback) {\n        _filter(eachfn, arr, function(value, cb) {\n            iterator(value, function(v) {\n                cb(!v);\n            });\n        }, callback);\n    }\n    async.reject = doParallel(_reject);\n    async.rejectLimit = doParallelLimit(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    function _createTester(eachfn, check, getResult) {\n        return function(arr, limit, iterator, cb) {\n            function done() {\n                if (cb) cb(getResult(false, void 0));\n            }\n            function iteratee(x, _, callback) {\n                if (!cb) return callback();\n                iterator(x, function (v) {\n                    if (cb && check(v)) {\n                        cb(getResult(true, x));\n                        cb = iterator = false;\n                    }\n                    callback();\n                });\n            }\n            if (arguments.length > 3) {\n                eachfn(arr, limit, iteratee, done);\n            } else {\n                cb = iterator;\n                iterator = limit;\n                eachfn(arr, iteratee, done);\n            }\n        };\n    }\n\n    async.any =\n    async.some = _createTester(async.eachOf, toBool, identity);\n\n    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);\n\n    async.all =\n    async.every = _createTester(async.eachOf, notId, notId);\n\n    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);\n\n    function _findGetResult(v, x) {\n        return x;\n    }\n    async.detect = _createTester(async.eachOf, identity, _findGetResult);\n    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);\n    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                callback(null, _map(results.sort(comparator), function (x) {\n                    return x.value;\n                }));\n            }\n\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    };\n\n    async.auto = function (tasks, concurrency, callback) {\n        if (typeof arguments[1] === 'function') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = _once(callback || noop);\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length;\n        if (!remainingTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = remainingTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n\n        var hasError = false;\n\n        var listeners = [];\n        function addListener(fn) {\n            listeners.unshift(fn);\n        }\n        function removeListener(fn) {\n            var idx = _indexOf(listeners, fn);\n            if (idx >= 0) listeners.splice(idx, 1);\n        }\n        function taskComplete() {\n            remainingTasks--;\n            _arrayEach(listeners.slice(0), function (fn) {\n                fn();\n            });\n        }\n\n        addListener(function () {\n            if (!remainingTasks) {\n                callback(null, results);\n            }\n        });\n\n        _arrayEach(keys, function (k) {\n            if (hasError) return;\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = _restParam(function(err, args) {\n                runningTasks--;\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _forEachOf(results, function(val, rkey) {\n                        safeResults[rkey] = val;\n                    });\n                    safeResults[k] = args;\n                    hasError = true;\n\n                    callback(err, safeResults);\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            });\n            var requires = task.slice(0, task.length - 1);\n            // prevent dead-locks\n            var len = requires.length;\n            var dep;\n            while (len--) {\n                if (!(dep = tasks[requires[len]])) {\n                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));\n                }\n                if (_isArray(dep) && _indexOf(dep, k) >= 0) {\n                    throw new Error('Has cyclic dependencies');\n                }\n            }\n            function ready() {\n                return runningTasks < concurrency && _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            }\n            if (ready()) {\n                runningTasks++;\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                addListener(listener);\n            }\n            function listener() {\n                if (ready()) {\n                    runningTasks++;\n                    removeListener(listener);\n                    task[task.length - 1](taskCallback, results);\n                }\n            }\n        });\n    };\n\n\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var DEFAULT_INTERVAL = 0;\n\n        var attempts = [];\n\n        var opts = {\n            times: DEFAULT_TIMES,\n            interval: DEFAULT_INTERVAL\n        };\n\n        function parseTimes(acc, t){\n            if(typeof t === 'number'){\n                acc.times = parseInt(t, 10) || DEFAULT_TIMES;\n            } else if(typeof t === 'object'){\n                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;\n                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;\n            } else {\n                throw new Error('Unsupported argument type for \\'times\\': ' + typeof t);\n            }\n        }\n\n        var length = arguments.length;\n        if (length < 1 || length > 3) {\n            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');\n        } else if (length <= 2 && typeof times === 'function') {\n            callback = task;\n            task = times;\n        }\n        if (typeof times !== 'function') {\n            parseTimes(opts, times);\n        }\n        opts.callback = callback;\n        opts.task = task;\n\n        function wrappedTask(wrappedCallback, wrappedResults) {\n            function retryAttempt(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            }\n\n            function retryInterval(interval){\n                return function(seriesCallback){\n                    setTimeout(function(){\n                        seriesCallback(null);\n                    }, interval);\n                };\n            }\n\n            while (opts.times) {\n\n                var finalAttempt = !(opts.times-=1);\n                attempts.push(retryAttempt(opts.task, finalAttempt));\n                if(!finalAttempt && opts.interval > 0){\n                    attempts.push(retryInterval(opts.interval));\n                }\n            }\n\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || opts.callback)(data.err, data.result);\n            });\n        }\n\n        // If a callback is passed, run this as a controll flow\n        return opts.callback ? wrappedTask() : wrappedTask;\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = _once(callback || noop);\n        if (!_isArray(tasks)) {\n            var err = new Error('First argument to waterfall must be an array of functions');\n            return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        function wrapIterator(iterator) {\n            return _restParam(function (err, args) {\n                if (err) {\n                    callback.apply(null, [err].concat(args));\n                }\n                else {\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    ensureAsync(iterator).apply(null, args);\n                }\n            });\n        }\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    function _parallel(eachfn, tasks, callback) {\n        callback = callback || noop;\n        var results = _isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, function (task, key, callback) {\n            task(_restParam(function (err, args) {\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                results[key] = args;\n                callback(err);\n            }));\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.parallel = function (tasks, callback) {\n        _parallel(async.eachOf, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel(_eachOfLimit(limit), tasks, callback);\n    };\n\n    async.series = function(tasks, callback) {\n        _parallel(async.eachOfSeries, tasks, callback);\n    };\n\n    async.iterator = function (tasks) {\n        function makeCallback(index) {\n            function fn() {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            }\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        }\n        return makeCallback(0);\n    };\n\n    async.apply = _restParam(function (fn, args) {\n        return _restParam(function (callArgs) {\n            return fn.apply(\n                null, args.concat(callArgs)\n            );\n        });\n    });\n\n    function _concat(eachfn, arr, fn, callback) {\n        var result = [];\n        eachfn(arr, function (x, index, cb) {\n            fn(x, function (err, y) {\n                result = result.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, result);\n        });\n    }\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        callback = callback || noop;\n        if (test()) {\n            var next = _restParam(function(err, args) {\n                if (err) {\n                    callback(err);\n                } else if (test.apply(this, args)) {\n                    iterator(next);\n                } else {\n                    callback.apply(null, [null].concat(args));\n                }\n            });\n            iterator(next);\n        } else {\n            callback(null);\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        var calls = 0;\n        return async.whilst(function() {\n            return ++calls <= 1 || test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.until = function (test, iterator, callback) {\n        return async.whilst(function() {\n            return !test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        return async.doWhilst(iterator, function() {\n            return !test.apply(this, arguments);\n        }, callback);\n    };\n\n    async.during = function (test, iterator, callback) {\n        callback = callback || noop;\n\n        var next = _restParam(function(err, args) {\n            if (err) {\n                callback(err);\n            } else {\n                args.push(check);\n                test.apply(this, args);\n            }\n        });\n\n        var check = function(err, truth) {\n            if (err) {\n                callback(err);\n            } else if (truth) {\n                iterator(next);\n            } else {\n                callback(null);\n            }\n        };\n\n        test(check);\n    };\n\n    async.doDuring = function (iterator, test, callback) {\n        var calls = 0;\n        async.during(function(next) {\n            if (calls++ < 1) {\n                next(null, true);\n            } else {\n                test.apply(this, arguments);\n            }\n        }, iterator, callback);\n    };\n\n    function _queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new Error('Concurrency must not be zero');\n        }\n        function _insert(q, data, pos, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    callback: callback || noop\n                };\n\n                if (pos) {\n                    q.tasks.unshift(item);\n                } else {\n                    q.tasks.push(item);\n                }\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n            });\n            async.setImmediate(q.process);\n        }\n        function _next(q, tasks) {\n            return function(){\n                workers -= 1;\n\n                var removed = false;\n                var args = arguments;\n                _arrayEach(tasks, function (task) {\n                    _arrayEach(workersList, function (worker, index) {\n                        if (worker === task && !removed) {\n                            workersList.splice(index, 1);\n                            removed = true;\n                        }\n                    });\n\n                    task.callback.apply(task, args);\n                });\n                if (q.tasks.length + workers === 0) {\n                    q.drain();\n                }\n                q.process();\n            };\n        }\n\n        var workers = 0;\n        var workersList = [];\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            payload: payload,\n            saturated: noop,\n            empty: noop,\n            drain: noop,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n                _insert(q, data, false, callback);\n            },\n            kill: function () {\n                q.drain = noop;\n                q.tasks = [];\n            },\n            unshift: function (data, callback) {\n                _insert(q, data, true, callback);\n            },\n            process: function () {\n                while(!q.paused && workers < q.concurrency && q.tasks.length){\n\n                    var tasks = q.payload ?\n                        q.tasks.splice(0, q.payload) :\n                        q.tasks.splice(0, q.tasks.length);\n\n                    var data = _map(tasks, function (task) {\n                        return task.data;\n                    });\n\n                    if (q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    workersList.push(tasks[0]);\n                    var cb = only_once(_next(q, tasks));\n                    worker(data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            workersList: function () {\n                return workersList;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                q.paused = true;\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                var resumeCount = Math.min(q.concurrency, q.tasks.length);\n                // Need to call q.process once per concurrent\n                // worker to preserve full concurrency after pause\n                for (var w = 1; w <= resumeCount; w++) {\n                    async.setImmediate(q.process);\n                }\n            }\n        };\n        return q;\n    }\n\n    async.queue = function (worker, concurrency) {\n        var q = _queue(function (items, cb) {\n            worker(items[0], cb);\n        }, concurrency, 1);\n\n        return q;\n    };\n\n    async.priorityQueue = function (worker, concurrency) {\n\n        function _compareTasks(a, b){\n            return a.priority - b.priority;\n        }\n\n        function _binarySearch(sequence, item, compare) {\n            var beg = -1,\n                end = sequence.length - 1;\n            while (beg < end) {\n                var mid = beg + ((end - beg + 1) >>> 1);\n                if (compare(item, sequence[mid]) >= 0) {\n                    beg = mid;\n                } else {\n                    end = mid - 1;\n                }\n            }\n            return beg;\n        }\n\n        function _insert(q, data, priority, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    priority: priority,\n                    callback: typeof callback === 'function' ? callback : noop\n                };\n\n                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n                async.setImmediate(q.process);\n            });\n        }\n\n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n\n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n            _insert(q, data, priority, callback);\n        };\n\n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        return _queue(worker, 1, payload);\n    };\n\n    function _console_fn(name) {\n        return _restParam(function (fn, args) {\n            fn.apply(null, args.concat([_restParam(function (err, args) {\n                if (typeof console === 'object') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _arrayEach(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            })]));\n        });\n    }\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        var has = Object.prototype.hasOwnProperty;\n        hasher = hasher || identity;\n        var memoized = _restParam(function memoized(args) {\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (has.call(memo, key)) {   \n                async.setImmediate(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (has.call(queues, key)) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([_restParam(function (args) {\n                    memo[key] = args;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i].apply(null, args);\n                    }\n                })]));\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n        return function () {\n            return (fn.unmemoized || fn).apply(null, arguments);\n        };\n    };\n\n    function _times(mapper) {\n        return function (count, iterator, callback) {\n            mapper(_range(count), iterator, callback);\n        };\n    }\n\n    async.times = _times(async.map);\n    async.timesSeries = _times(async.mapSeries);\n    async.timesLimit = function (count, limit, iterator, callback) {\n        return async.mapLimit(_range(count), limit, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return _restParam(function (args) {\n            var that = this;\n\n            var callback = args[args.length - 1];\n            if (typeof callback == 'function') {\n                args.pop();\n            } else {\n                callback = noop;\n            }\n\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {\n                    cb(err, nextargs);\n                })]));\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        });\n    };\n\n    async.compose = function (/* functions... */) {\n        return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n\n    function _applyEach(eachfn) {\n        return _restParam(function(fns, args) {\n            var go = _restParam(function(args) {\n                var that = this;\n                var callback = args.pop();\n                return eachfn(fns, function (fn, _, cb) {\n                    fn.apply(that, args.concat([cb]));\n                },\n                callback);\n            });\n            if (args.length) {\n                return go.apply(this, args);\n            }\n            else {\n                return go;\n            }\n        });\n    }\n\n    async.applyEach = _applyEach(async.eachOf);\n    async.applyEachSeries = _applyEach(async.eachOfSeries);\n\n\n    async.forever = function (fn, callback) {\n        var done = only_once(callback || noop);\n        var task = ensureAsync(fn);\n        function next(err) {\n            if (err) {\n                return done(err);\n            }\n            task(next);\n        }\n        next();\n    };\n\n    function ensureAsync(fn) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            args.push(function () {\n                var innerArgs = arguments;\n                if (sync) {\n                    async.setImmediate(function () {\n                        callback.apply(null, innerArgs);\n                    });\n                } else {\n                    callback.apply(null, innerArgs);\n                }\n            });\n            var sync = true;\n            fn.apply(this, args);\n            sync = false;\n        });\n    }\n\n    async.ensureAsync = ensureAsync;\n\n    async.constant = _restParam(function(values) {\n        var args = [null].concat(values);\n        return function (callback) {\n            return callback.apply(this, args);\n        };\n    });\n\n    async.wrapSync =\n    async.asyncify = function asyncify(func) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (_isObject(result) && typeof result.then === \"function\") {\n                result.then(function(value) {\n                    callback(null, value);\n                })[\"catch\"](function(err) {\n                    callback(err.message ? err : new Error(err));\n                });\n            } else {\n                callback(null, result);\n            }\n        });\n    };\n\n    // Node.js\n    if (typeof module === 'object' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","import { IDocumentUrlDialogService } from '../document_url_dialog/IDocumentUrlDialogService';\ndeclare let unescape: any;\n\nconst ConfigTranslations = (pipTranslateProvider: pip.services.ITranslateProvider) => {\n    pipTranslateProvider.translations('en', {\n        'FILE_DOCUMENTS': 'Upload document',\n        'WEB_LINK': 'Use web link'\n    });\n    pipTranslateProvider.translations('ru', {\n        'FILE_DOCUMENTS': 'Загрузить документ',\n        'WEB_LINK': 'Вставить веб ссылка'\n    });\n}\n\n{\n    interface IAddDocumentScope extends angular.IScope {\n        $document: any;\n        onChange: any;\n        multi: any;\n        ngDisabled: any;\n    }\n\n    class AddDocumentsOnChangeParams {\n        public url: string;\n        public file: any;\n    }\n\n    class AddDocumentController {\n        constructor(\n            private $scope: IAddDocumentScope,\n            private $element: JQuery,\n            private $mdMenu,\n            private $timeout: ng.ITimeoutService,\n            private pipDocumentUrlDialog: IDocumentUrlDialogService\n        ) {\n            \"ngInject\";\n\n        }\n\n        public openMenu($mdOpenMenu): void {\n            if (this.$scope.ngDisabled()) {\n                return;\n            }\n            $mdOpenMenu();\n        }\n\n        private toBoolean(value: any): boolean {\n            if (!value) { return false; }\n\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n        public isMulti(): boolean {\n            if (this.$scope.multi !== undefined && this.$scope.multi !== null) {\n                if (angular.isFunction(this.$scope.multi)) {\n                    return this.toBoolean(this.$scope.multi());\n                } else {\n                    return this.toBoolean(this.$scope.multi);\n                }\n            } else {\n                return true;\n            }\n        }\n\n        public hideMenu(): void {\n            this.$mdMenu.hide();\n        }\n\n        public addDocuments(documents: any): void {\n\n            if (documents === undefined) { return; }\n\n            if (Array.isArray(documents)) {\n                documents.forEach((img) => {\n                    if (this.$scope.onChange) {\n                        let params: AddDocumentsOnChangeParams = { url: img.url, file: img.file };\n                        this.$scope.onChange(params);\n                    }\n                });\n            } else {\n                if (this.$scope.onChange) {\n                    let params: AddDocumentsOnChangeParams = { url: documents.url, file: documents.file };\n                    this.$scope.onChange(params);\n                }\n            }\n\n            if (this.$scope.$document === undefined || !Array.isArray(this.$scope.$document)) {\n                return;\n            }\n\n            if (Array.isArray(documents)) {\n                documents.forEach((img) => {\n                    this.$scope.$document.push(img.url);\n                });\n            } else {\n                this.$scope.$document.push(documents.url);\n            }\n        }\n\n        // Process user actions\n        public onFileChange($files: any): void {\n            if ($files == null || $files.length == 0) { return; }\n\n            $files.forEach((file) => {\n                if (file.type.indexOf('image') > -1) {\n                    this.$timeout(() => {\n                        let fileReader = new FileReader();\n                        fileReader.readAsDataURL(file);\n                        fileReader.onload = (e) => {\n                            this.$timeout(() => {\n                                this.addDocuments({ url: null, file: file });\n                            });\n                        }\n                    });\n                }\n            });\n\n        }\n\n        public onWebLinkClick(): void {\n            this.pipDocumentUrlDialog.show((result) => {\n                this.addDocuments({ url: result, file: null });\n            });\n        }\n\n    }\n\n    const AddDocument = function (): ng.IDirective {\n        return {\n            restrict: 'AC',\n            scope: {\n                $document: '=pipDocuments',\n                onChange: '&pipChanged',\n                multi: '&pipMulti',\n                ngDisabled: '&'\n            },\n            transclude: true,\n            templateUrl: 'add_documents/AddDocument.html',\n            controller: AddDocumentController,\n            controllerAs: 'vm'\n        };\n    }\n\n    angular\n        .module('pipAddDocument', ['DocumentUrlDialog'])\n        .config(ConfigTranslations)\n        .directive('pipAddDocument', AddDocument);\n}\n","export class Attachment {\n    public constructor(id?: string, uri?: string, name?: string) {\n        this.id = id;\n        this.uri = uri;\n        this.name = name;\n    }\n    public id?: string;\n    public uri?: string;\n    public name?: string;\n} ","export class BlobInfo {\n\n    public constructor(id: string, group: string, name: string, size?: number,\n        content_type?: string, create_time?: Date, expire_time?: Date, completed?: boolean) {\n        this.id = id;\n        this.group = group;\n        this.name = name;\n        this.size = size;\n        this.content_type = content_type;\n        this.create_time = create_time;\n        this.expire_time = expire_time;\n        this.completed = completed;\n    }\n\n    /* Identification */\n    public id: string;\n    public group: string;\n    public name: string;\n\n    /* Content */\n    public size: number;\n    public content_type: string;\n    public create_time: Date;\n    public expire_time: Date;\n    public completed: boolean;\n}","export class DataPage<T> {\n    public constructor(data: T[] = null, total: number = null) {\n\t\tthis.total = total;\n\t\tthis.data = data;\n\t}\n\n    public total: number;\n    public data: T[];\n}","import { IDocumentDataService, IDocumentDataProvider, DocumentConfig } from './IDocumentDataService';\nimport { BlobInfo } from './BlobInfo';\nimport { DataPage } from './DataPage';\n\nclass DocumentData implements IDocumentDataService {\n    private RESOURCE: string = 'documents';\n    private RESOURCE_INFO: string = 'documentsInfo';\n\n    private PAGE_SIZE: number = 100;\n    private PAGE_START: number = 0;\n    private PAGE_TOTAL: boolean = true;\n\n    constructor(\n        private _config: DocumentConfig,\n        private pipRest: pip.rest.IRestService,\n        private pipFormat: pip.services.IFormat\n    ) {\n        \"ngInject\";\n\n    }\n\n\n    public get DocumentRoute(): string {\n        return this._config.DocumentRoute;\n    }\n\n    public getDocumentUrl(id: string): string {\n        return this.pipRest.serverUrl + this._config.DocumentRoute + '/' + id;\n    }\n\n    public postDocumentUrl(): string {\n        return this.pipRest.serverUrl + this._config.DocumentRoute;\n    }\n\n\n    public readDocuments(params: any, successCallback?: (data: DataPage<BlobInfo>) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        params = params || {};\n        if (params.filter) {\n            params.filer = this.pipFormat.filterToString(params.filer);\n        }\n\n        return this.pipRest.getResource(this.RESOURCE).page(params, successCallback, errorCallback);\n    }\n\n    public readDocumentInfo(params: any, successCallback?: (data: BlobInfo) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        params = params || {};\n        if (params.filter) {\n            params.filer = this.pipFormat.filterToString(params.filer);\n        }\n\n        return this.pipRest.getResource(this.RESOURCE_INFO).get(params, successCallback, errorCallback);\n    }\n\n    public readDocument(id: string, successCallback?: (data: BlobInfo) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n\n        return this.pipRest.getResource(this.RESOURCE).get({\n            blob_id: id\n        }, successCallback, errorCallback);\n    }\n\n    public deleteDocument(id: string, successCallback?: () => void, errorCallback?: (error: any) => void): void {\n        this.pipRest.getResource(this.RESOURCE).remove(\n            { blob_id: id },\n            null,\n            successCallback,\n            errorCallback\n        );\n    }\n}\n\n\nclass DocumentDataProvider implements IDocumentDataProvider {\n    private _service: IDocumentDataService;\n    private _config: DocumentConfig;\n\n    constructor(\n        private pipRestProvider: pip.rest.IRestProvider\n    ) {\n        this._config = new DocumentConfig();\n\n        this._config.DocumentRoute = '/api/1.0/blobs';\n    }\n\n    public get DocumentRoute(): string {\n        return this._config.DocumentRoute;\n    }\n\n    public set DocumentRoute(value: string) {\n        this._config.DocumentRoute = value;\n\n        this.pipRestProvider.registerOperation('documents', this._config.DocumentRoute + '/:document_id');\n        this.pipRestProvider.registerResource('documentInfo', this._config.DocumentRoute + '/:document_id/info');\n    }\n\n    public $get(\n        pipRest: pip.rest.IRestService,\n        pipFormat: pip.services.IFormat\n    ) {\n        \"ngInject\";\n\n        if (this._service == null) {\n            this._service = new DocumentData(this._config, pipRest, pipFormat);\n        }\n\n        return this._service;\n    }\n\n}\n\n\nangular\n    .module('pipDocumentData', ['pipRest', 'pipServices'])\n    .provider('pipDocumentData', DocumentDataProvider);\n\n\n","import { BlobInfo } from './BlobInfo';\nimport { DataPage } from './DataPage';\n\nexport class DocumentConfig {\n    public DocumentRoute: string;\n}\n\nexport interface IDocumentDataService {\n    DocumentRoute: string;\n\n    getDocumentUrl(id: string): string;\n    postDocumentUrl(): string\n\n    readDocuments(params: any, successCallback?: (data: DataPage<BlobInfo>) => void, errorCallback?: (error: any) => void): angular.IPromise<any>\n    readDocumentInfo(params: any, successCallback?: (data: BlobInfo) => void, errorCallback?: (error: any) => void): angular.IPromise<any>;\n    readDocument(id: string, successCallback?: (data: BlobInfo) => void, errorCallback?: (error: any) => void): angular.IPromise<any>;\n    deleteDocument(id: string, successCallback?: () => void, errorCallback?: (error: any) => void): void;\n}\n\n\nexport interface IDocumentDataProvider extends ng.IServiceProvider {\n    // bases document route string? sach as: '/api/1.0/blobs'\n    DocumentRoute: string;\n}\n","import './Attachment';\nimport './BlobInfo';\nimport './DataPage';\nimport './DocumentDataService';\nimport './IDocumentDataService';\n\nangular\n    .module('pipDocuments.Data', [\n        'pipDocumentData'\n    ]);\n\nexport * from './Attachment';\nexport * from './BlobInfo';\nexport * from './DataPage';\nexport * from './IDocumentDataService';\n","import { DefaultDocumentIcon } from '../document_list_edit/DocumentListEdit';\nimport { Attachment } from '../data/Attachment';\nimport { IDocumentDataService } from '../data/IDocumentDataService';\n\nconst ConfigTranslations = (pipTranslate: pip.services.ITranslateService) => {\n    if (pipTranslate) {\n        (pipTranslate).setTranslations('en', {\n            DOCUMENTS_ATTACHED: 'document(s) attached',\n            ERROR_DOCUMENTS_LOADED: 'Error: <%= error_number %> document(s) are not loaded'\n        });\n        (pipTranslate).setTranslations('ru', {\n            DOCUMENTS_ATTACHED: 'документов добавлено',\n            ERROR_DOCUMENTS_LOADED: 'Ошибка: <%= error_number %> документ(ов) не загружено'\n        });\n    }\n}\n\n{\n\n    interface DocumentListBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        documents: any;\n        collapsable: any;\n        pipDocumentIcon: any;\n        rebind: any;\n    }\n\n    const DocumentListBindings: DocumentListBindings = {\n        ngDisabled: '&?',\n        documents: '<pipDocuments',\n        collapsable: '<?pipCollapse',\n        pipDocumentIcon: '<?pipDocumentIcon',\n        rebind: '<?pipRebind'\n    }\n\n    class DocumentListChanges implements ng.IOnChangesObject, DocumentListBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        ngDisabled: ng.IChangesObject<() => ng.IPromise<void>>;\n        documents: ng.IChangesObject<Attachment[]>;\n        collapsable: ng.IChangesObject<boolean>;\n        pipDocumentIcon: ng.IChangesObject<boolean>;\n        rebind: ng.IChangesObject<boolean>;\n    }\n\n    class DocumentListController {\n        private documentsContainer: JQuery;\n        private up: JQuery;\n        private down: JQuery;\n\n        public ngDisabled: () => boolean;\n        public collapsable: boolean;\n        public pipDocumentIcon: boolean;\n        public documents: Attachment[];\n        public rebind: boolean;\n\n        public showDocuments: boolean;\n        public documentList: Attachment[];\n        public documentListIcon: string = DefaultDocumentIcon;\n\n        constructor(\n            private $element: JQuery,\n            private $attrs: ng.IAttributes,\n            private pipTranslate: pip.services.ITranslateService,\n            private $parse: ng.IParseService,\n            private $scope: angular.IScope,\n            private $timeout: ng.ITimeoutService,\n            private pipDocumentData: IDocumentDataService,\n            private pipRest: pip.rest.IRestService\n        ) {\n            \"ngInject\";\n\n            // Add class\n            this.$element.addClass('pip-document-list');\n        }\n\n        public $postLink() {\n            this.documentsContainer = this.$element.children('.pip-documents-container');\n            this.up = this.$element.find('.icon-up');\n            this.down = this.$element.find('.icon-down');\n            this.documents = this.documents || [];\n            this.showDocuments = this.collapsable;\n\n            if (!this.collapsable) {\n                this.up.hide();\n                this.documentsContainer.hide();\n            } else {\n                this.down.hide();\n            }\n\n            if (this.ngDisabled()) {\n                this.up.hide();\n                this.down.hide();\n            }\n        }\n\n        public onDownload(item): void {\n            let e = document.createEvent('MouseEvents');\n            let a = document.createElement('a');\n\n            a.href = this.pipDocumentData.getDocumentUrl(item.id);;\n            a.dataset['downloadurl'] = ['undefined', a.download, a.href].join(':');\n            e.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, true, false, false, false, 0, null);\n            a.dispatchEvent(e);\n        }\n\n        public $onChanges(changes: DocumentListChanges) {\n            if (this.toBoolean(this.rebind)) {\n                if (changes.documents && changes.documents.currentValue) {\n                    if (this.differentDocumentList(changes.documents.currentValue)) {\n                        this.documents = changes.documents.currentValue;\n                    }\n                }\n            }\n        }\n\n        public differentDocumentList(newList: Attachment[]): boolean {\n            let i: number, obj: Attachment;\n\n            if (!this.documents || newList) { return true; }\n            if (this.documents.length !== newList.length) { return true; }\n\n            for (i = 0; i < newList.length; i++) {\n                obj = _.find(this.documents, { id: newList[i].id });\n\n                if (obj === undefined) { return true; }\n            }\n\n            return false;\n        }\n\n        public onTitleClick(event: ng.IAngularEvent): void {\n            if (event) { event.stopPropagation(); }\n\n            if (this.$attrs.disabled) { return; }\n\n            this.showDocuments = !this.showDocuments;\n            this.up[this.showDocuments ? 'show' : 'hide']();\n            this.down[!this.showDocuments ? 'show' : 'hide']();\n            this.documentsContainer[this.showDocuments ? 'show' : 'hide']();\n        }\n\n        private toBoolean(value: any): boolean {\n            if (value == null) return false;\n            if (!value) return false;\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n    }\n\n    const documentList: ng.IComponentOptions = {\n        bindings: DocumentListBindings,\n        templateUrl: 'document_list/DocumentList.html',\n        controller: DocumentListController,\n    }\n\n    angular\n        .module(\"pipDocumentList\", ['pipFocused', 'pipDocuments.Templates'])\n        .run(ConfigTranslations)\n        .component('pipDocumentList', documentList);\n}","export let DefaultDocumentIcon: string = 'document';\nimport { Attachment, BlobInfo } from '../data';\nimport { IDocumentDataService } from '../data/IDocumentDataService';\n\nlet async = require('async');\n\nconst ConfigTranslations = (pipTranslate: pip.services.ITranslateService) => {\n    if (pipTranslate) {\n        (pipTranslate).setTranslations('en', {\n            DOCUMENT_LIST_EDIT_TEXT: 'Click here to add a document',\n            ERROR_TRANSACTION_IN_PROGRESS: 'Transaction is in progress. Please, wait until it\\'s finished or abort'\n        });\n        (pipTranslate).setTranslations('ru', {\n            DOCUMENT_LIST_EDIT_TEXT: 'Нажмите сюда, чтобы добавить документ',\n            ERROR_TRANSACTION_IN_PROGRESS: 'Транзакция еще не завершена. Подождите окончания или прервите её'\n        });\n    }\n}\n\nexport class DocumentListEditControl {\n    uploading: number = 0;\n    items: DocumentListEditItem[];\n    reset: () => void;\n    save: (successCallback?: (data: Attachment[]) => void, errorCallback?: (error: any) => void) => void;\n    abort: () => void;\n    error?: any;\n}\n\nexport class DocumentUploadErrors {\n    id: string;\n    uri: string;\n    name: string;\n    error: any;\n}\n\nexport class DocumentListEditItem {\n    pin: number;\n    id: string;\n    name: string;\n    uri?: string;\n    uploading: boolean;\n    uploaded: boolean;\n    upload?: any;\n    progress: number;\n    file: any;\n    state: string;\n    error: any\n}\n\n{\n    interface IDocumentListEditBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        pipCreated: any;\n        pipChanged: any;\n        documents: any;\n        addedDocument: any;\n        documentListText: any;\n        documentListIcon: any;\n        cancelDrag: any;\n    }\n\n    const DocumentListEditBindings: IDocumentListEditBindings = {\n        ngDisabled: '&?',\n        pipCreated: '&?',\n        pipChanged: '&?',\n        documents: '=?pipDocuments',\n        addedDocument: '&?pipAddedDocument',\n        documentListText: '<?pipDefaultText',\n        documentListIcon: '<?pipDefaultIcon',\n        cancelDrag: '<?pipCanselDrag'\n    }\n\n    class DocumentListEditChanges implements ng.IOnChangesObject, IDocumentListEditBindings {\n        [key: string]: ng.IChangesObject<any>;\n        // Not one way bindings\n        ngDisabled: ng.IChangesObject<() => ng.IPromise<void>>;\n        pipCreated: ng.IChangesObject<() => ng.IPromise<void>>;\n        pipChanged: ng.IChangesObject<() => ng.IPromise<void>>;\n        documents: ng.IChangesObject<Attachment[]>;\n        addedDocument: ng.IChangesObject<() => boolean>;\n        documentListText: ng.IChangesObject<string>;\n        documentListIcon: ng.IChangesObject<string>;\n        cancelDrag: ng.IChangesObject<() => boolean>;\n    }\n\n    class SenderEvent {\n        sender: DocumentListEditControl;\n    }\n\n    class DocEvent {\n        $event: SenderEvent;\n        $control: DocumentListEditControl;\n    }\n\n    class DocumentStates {\n        static Original: string = 'original';\n        static Copied: string = 'copied';\n        static Added: string = 'added';\n        static Error: string = 'error';\n        static Deleted: string = 'deleted';\n    }\n\n    class DocumentListEditController {\n        private _pipTranslate: pip.services.ITranslateService;\n        private _elementDocumentDrop: JQuery;\n        private _itemPin: number = 0;\n        private documentStartState: string;\n        private loadedFiles: boolean\n\n        private cancelQuery: any;\n\n        public ngDisabled: () => boolean;\n        public pipCreated: (params: DocEvent) => void;\n        public pipChanged: (params: DocEvent) => void;\n        public documents: Attachment[];\n        public addedDocument: () => boolean;\n        public cancelDrag: () => boolean;\n        public documentListText: string;\n        public documentListIcon: string;\n        public iconError: string;\n\n        public control: DocumentListEditControl;\n\n        constructor(\n            private $log: ng.ILogService,\n            private $element: JQuery,\n            private $injector: ng.auto.IInjectorService,\n            private pipRest: pip.rest.IRestService,\n            private $timeout: ng.ITimeoutService,\n            private pipDocumentData: IDocumentDataService,\n            private pipFileUpload: pip.files.IFileUploadService\n\n        ) {\n            \"ngInject\";\n\n            this._pipTranslate = this.$injector.has('pipTranslate') ? <pip.services.ITranslateService>this.$injector.get('pipTranslate') : null;\n\n            this._elementDocumentDrop = $element.children('.pip-document-drop');\n\n            if (!this.documentListText) {\n                this.documentListText = 'DOCUMENT_LIST_EDIT_TEXT';\n            }\n            if (!this.documentListIcon) {\n                this.documentListIcon = 'document';\n            }\n            this.iconError = 'warn-circle';\n            this.documentStartState = this.toBoolean(this.addedDocument) ? DocumentStates.Copied : DocumentStates.Original;\n\n            this.control = {\n                uploading: 0,\n                items: this.getItems(),\n                reset: () => {\n                    this.resetDocument();\n                },\n                save: (successCallback?: (data: Attachment[]) => void, errorCallback?: (error: any) => void) => {\n                    this.saveDocument(successCallback, errorCallback);\n                },\n                abort: () => {\n                    this.onAbort();\n                },\n                error: null\n            };\n\n            this.control.reset();\n            this.executeCallback();\n            // Add class\n            this.$element.addClass('pip-document-list-edit');\n        }\n\n        public $onChanges(changes: DocumentListEditChanges): void {\n            if (changes.documents && changes.documents.currentValue) {\n                if (!_.isEqual(this.documents, changes.documents.currentValue)) {\n                    this.control.reset();\n                }\n            }\n        }\n\n        private toBoolean(value: any): boolean {\n            if (value == null) {\n                return false;\n            }\n            if (!value) {\n                return false;\n            }\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n        private getItems(): DocumentListEditItem[] {\n            let items: DocumentListEditItem[] = [];\n            let i: number;\n\n            if (this.documents === null || this.documents.length === 0) {\n                return items;\n            }\n\n            for (i = 0; i < this.documents.length; i++) {\n                let item: DocumentListEditItem = {\n                    pin: this._itemPin++,\n                    id: this.documents[i].id,\n                    name: this.documents[i].name,\n                    uri: this.documents[i].uri,\n                    uploading: false,\n                    uploaded: false,\n                    progress: 50,\n                    file: null,\n                    state: this.documentStartState,\n                    error: null\n                }\n                items.push(item);\n            }\n\n            return items;\n        }\n\n        private setItems(): void {\n            let item: DocumentListEditItem;\n            let i: number;\n\n            // Clean the array\n            if (this.documents && this.documents.length > 0) {\n                this.documents.splice(0, this.documents.length);\n            }\n            for (i = 0; i < this.control.items.length; i++) {\n                item = this.control.items[i];\n\n                if ((item.id || item.uri) && item.state != DocumentStates.Deleted) {\n                    let newDoc: Attachment = {\n                        id: item.id,\n                        name: item.name,\n                        uri: item.uri\n                    };\n                    this.documents.push(newDoc);\n                }\n            }\n        }\n\n        private getUploadErors(): DocumentUploadErrors[] {\n            let errors: DocumentUploadErrors[] = [];\n\n            _.each(this.control.items, (item: DocumentListEditItem) => {\n                if (item.state == DocumentStates.Error || item.error) {\n                    errors.push({\n                        id: item.id,\n                        uri: item.uri,\n                        name: item.name,\n                        error: item.error\n                    })\n                }\n            });\n\n            return errors;\n        }\n\n        public isDisabled(): boolean {\n            if (this.control.uploading) {\n                return true;\n            }\n\n            if (this.ngDisabled) {\n                return this.ngDisabled();\n            }\n\n            return false;;\n        }\n\n        private resetDocument(): void {\n            this.control.uploading = 0;\n            this.control.items = this.getItems();\n        }\n\n        private deleteItem(item: DocumentListEditItem, callback: (error?: any) => void): void {\n            // Avoid double transactions\n            if (item.upload) {\n                item.upload.abort();\n                item.upload = null;\n            }\n\n            if (item.state !== DocumentStates.Deleted) { return; }\n\n            // if attachment by uri\n            this.removeItem(item);\n            callback();\n        }\n\n        private saveDocument(successCallback?: (data: Attachment[]) => void, errorCallback?: (error: any) => void): void {\n            let item: DocumentListEditItem;\n            let onItemCallback: (error: any) => void;\n            let i: number;\n\n            if (this.control.uploading) {\n                if (errorCallback) {\n                    errorCallback('ERROR_TRANSACTION_IN_PROGRESS');\n                }\n\n                return;\n            }\n\n            this.cancelQuery = null;\n            this.control.error = null;\n            this.control.uploading = 0;\n\n            let addedBlobCollection = [];\n            let addedUrlCollection = [];\n\n            _.each(this.control.items, (item) => {\n                if (item.state == 'added') {\n                    if (!item.uri) {\n                        addedBlobCollection.push(item);\n                    } else {\n                        addedUrlCollection.push(item);\n                    }\n                }\n            });\n\n\n            let deletedCollection = _.filter(this.control.items, { state: 'deleted' });\n\n            // process addedUrlCollection\n            _.each(addedUrlCollection, (item) => {\n                item.uploaded = true;\n                item.uploading = false;\n                item.progress = 0;\n                item.upload = null;\n                item.file = null;\n                item.state = DocumentStates.Original;\n            });\n\n            if (!addedBlobCollection.length && !deletedCollection.length) {\n                // do nothing\n                if (addedUrlCollection.length > 0) {\n                    this.setItems();\n                }\n                this.control.uploading = 0;\n                if (successCallback) {\n                    successCallback(this.documents);\n                }\n\n                return;\n            }\n\n            this.control.uploading = addedBlobCollection.length + deletedCollection.length;\n            async.parallel([\n                (callbackAll) => {\n                    // add documents\n                    _.each(addedBlobCollection, (item) => {\n                        item.uploading = true;\n                        item.progress = 0;\n                    });\n                    this.pipFileUpload.multiUpload(\n                        this.pipDocumentData.postDocumentUrl(),\n                        addedBlobCollection,\n                        (index: number, data: BlobInfo, err: any) => {\n                            let item = addedBlobCollection[index];\n                            this.addItem(item, data, err);\n\n                            if (err) {\n                                this.control.error = true;\n                            }\n                        },\n                        (index: number, state: pip.files.FileUploadState, progress: number) => {\n                            // update item progress \n                            let item = addedBlobCollection[index];\n                            item.progress = progress;\n                        },\n                        (error: any, result: any, res: any) => {\n                            // reset upload abort\n                            this.cancelQuery = null;\n                            callbackAll();\n                        },\n                        (cancelQuery: any) => {\n                            this.cancelQuery = cancelQuery;\n                        },\n                        false,\n                        'pin'\n                    );\n                },\n                (callbackAll) => {\n                    // delete documents\n                    if (deletedCollection.length) {\n                        async.each(deletedCollection,\n                            (item, callback) => {\n                                this.deleteItem(item, (error: any) => { callback() });\n                            },\n                            (error, result) => {\n                                callbackAll();\n                            });\n                    } else {\n                        callbackAll();\n                    }\n\n                }\n            ],\n                // optional callback\n                (error, results) => {\n                    if (error && !this.control.error) {\n                        this.control.error = error;\n                    }\n                    if (this.control.error) {\n\n                        this.control.uploading = 0;\n                        let errors = this.getUploadErors();\n                        if (errorCallback) {\n                            errorCallback(errors);\n                        } else {\n                            this.$log.error(this.control.error);\n                        }\n                    } else {\n                        this.setItems();\n                        this.control.uploading = 0;\n                        if (successCallback) {\n                            successCallback(this.documents);\n                        }\n                    }\n\n\n                });\n\n        }\n\n        private addItem(oldItem: DocumentListEditItem, fileInfo: BlobInfo, error: any) {\n            let itemIndex = _.findIndex(this.control.items, { pin: oldItem.pin });\n            if (itemIndex < 0) return;\n            if (error) {\n                this.control.items[itemIndex].uploaded = false;\n                this.control.items[itemIndex].uploading = false;\n                this.control.items[itemIndex].progress = 0;\n                this.control.items[itemIndex].upload = null;\n                this.control.items[itemIndex].state = DocumentStates.Error;\n                this.control.items[itemIndex].error = error;\n\n            } else {\n                if (fileInfo) {\n                    this.control.items[itemIndex].id = fileInfo.id;\n                    this.control.items[itemIndex].name = fileInfo.name;\n                    this.control.items[itemIndex].uploaded = true;\n                    this.control.items[itemIndex].state = DocumentStates.Original;\n                } else {\n                    this.control.items[itemIndex].uploaded = false;\n                }\n                this.control.items[itemIndex].uploading = false;\n                this.control.items[itemIndex].progress = 0;\n                this.control.items[itemIndex].upload = null;\n                this.control.items[itemIndex].file = null;\n                this.control.items[itemIndex].error = null;\n            }\n        }\n\n        public onAbort(): void {\n            let item: DocumentListEditItem;\n            let i: number;\n\n            for (i = 0; i < this.control.items.length; i++) {\n                item = this.control.items[i];\n\n                if (item.uploading) {\n                    if (item.upload) {\n                        item.upload.abort();\n                    }\n\n                    item.uploaded = false;\n                    item.uploading = false;\n                    item.progress = 0;\n                    item.upload = null;\n                }\n            }\n\n            // abort upload\n            if (this.cancelQuery) {\n                this.cancelQuery.resolve();\n            }\n            // Abort transaction\n            this.control.uploading = 0;\n            this.control.error = true;\n        }\n\n        // Visualization functions\n        public filterItem(item: DocumentListEditItem): boolean {\n            return item.state !== DocumentStates.Deleted;\n        }\n\n        // Process user actions\n        public readItemLocally(url: string, file: any): void {\n\n            let item: DocumentListEditItem = {\n                pin: this._itemPin++,\n                id: null,\n                name: file ? file.name : url ? url.split('/').pop() : null,\n                uri: !file && url ? url : null,\n                uploading: false,\n                uploaded: false,\n                progress: 0,\n                file: file ? file : null,\n                state: DocumentStates.Added,\n                error: null\n            };\n\n            this.control.items.push(item);\n\n            this.onChange();\n        }\n\n        private removeItem(item: DocumentListEditItem): void {\n            if (item.state === DocumentStates.Added || item.state === DocumentStates.Copied) {\n                let index = _.findIndex(this.control.items, { pin: item.pin });\n                if (index > -1) {\n                    this.control.items.splice(index, 1);\n                }\n            } else {\n                item.state = DocumentStates.Deleted;\n            }\n        }\n\n        public onDelete(item: DocumentListEditItem): void {\n            this.removeItem(item);\n\n            this.onChange();\n        }\n\n        public onKeyDown($event: JQueryEventObject, item: DocumentListEditItem): void {\n            if (item) {\n                if ($event.keyCode === 46 || $event.keyCode === 8) {\n                    this.removeItem(item);\n\n                    this.onChange();\n                }\n            } else if ($event.keyCode === 13 || $event.keyCode === 32) {\n                // !! Avoid clash with $apply()\n                setTimeout(() => {\n                    this._elementDocumentDrop.trigger('click');\n                }, 0);\n            }\n        }\n\n        // On change event\n        public onChange() {\n            if (this.pipChanged) {\n                this.pipChanged({\n                    $event: { sender: this.control },\n                    $control: this.control\n                });\n            }\n        }\n\n        private executeCallback() {\n            // Execute callback\n            if (this.pipCreated) {\n                this.pipCreated({\n                    $event: { sender: this.control },\n                    $control: this.control\n                });\n            }\n        }\n    }\n\n    const documentListEdit: ng.IComponentOptions = {\n        bindings: DocumentListEditBindings,\n        templateUrl: 'document_list_edit/DocumentListEdit.html',\n        controller: DocumentListEditController\n    }\n\n    angular\n        .module(\"pipDocumentListEdit\", ['ui.event', 'pipFocused', 'pipDocuments.Templates', 'pipFiles', 'DocumentUrlDialog'])\n        .run(ConfigTranslations)\n        .component('pipDocumentListEdit', documentListEdit);\n}\n\n","import { IDocumentUrlDialogService } from './IDocumentUrlDialogService';\n\nclass DocumentUrlDialogService implements IDocumentUrlDialogService {\n    private _mdDialog: angular.material.IDialogService;\n\n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n\n    public show(successCallback?: (result) => void, cancelCallback?: () => void) {\n        this._mdDialog.show({\n            templateUrl: 'document_url_dialog/DocumentUrlDialog.html',\n            clickOutsideToClose: true,\n            controller: DocumentUrlDialogController,\n            controllerAs: '$ctrl'\n        })\n            .then(\n            (result) => {\n                if (successCallback) {\n                    successCallback(result);\n                }\n            });\n    }\n}\n\n\nconst ConfigDocumentUrlDialogTranslations = (pipTranslateProvider: pip.services.ITranslateProvider) => {\n    pipTranslateProvider.translations('en', {\n        'DOCUMENT_FROM_WEBLINK': 'Add web link',\n        'LINK_DOCUMENT': 'Link to the document...'\n    });\n    pipTranslateProvider.translations('ru', {\n        'DOCUMENT_FROM_WEBLINK': 'Добавить веб ссылку',\n        'LINK_DOCUMENT': 'Ссылка на документ...'\n    });\n}\n\nclass DocumentUrlDialogController {\n    public url: string = '';\n    public invalid: boolean = true;\n    public theme: string;\n    private ExpressionURI: any;\n    private regexURI: any;\n    public matchURI: boolean;\n\n    constructor(\n        private $log: ng.ILogService,\n        private $scope: ng.IScope,\n        private $mdDialog: angular.material.IDialogService,\n        private $rootScope: ng.IRootScopeService,\n        private $timeout: ng.ITimeoutService,\n        private $mdMenu\n    ) {\n        \"ngInject\";\n\n        this.theme = this.$rootScope[pip.themes.ThemeRootVar];\n\n        this.ExpressionURI = /^([a-z][a-z0-9+.-]*):(?:\\/\\/((?:(?=((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*))(\\3)@)?(?=(\\[[0-9A-F:.]{2,}\\]|(?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*))\\5(?::(?=(\\d*))\\6)?)(\\/(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*))\\8)?|(\\/?(?!\\/)(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*))\\10)?)(?:\\?(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/?]|%[0-9A-F]{2})*))\\11)?(?:#(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/?]|%[0-9A-F]{2})*))\\12)?$/i;\n        this.regexURI = new RegExp(this.ExpressionURI);\n        this.matchURI = false;\n    }\n\n    public checkUrl(): void {\n        if (this.url.match(this.regexURI)) {\n            this.matchURI = true;\n        } else {\n            this.matchURI = false;\n        }\n\n    };\n\n    public onCancelClick(): void {\n        this.$mdDialog.cancel();\n    };\n\n    public onAddClick(): void {\n        this.$mdDialog.hide(this.url);\n    };\n\n}\n\nangular\n    .module('DocumentUrlDialog', ['ngMaterial', 'pipDocuments.Templates'])\n    .service('pipDocumentUrlDialog', DocumentUrlDialogService)\n    .config(ConfigDocumentUrlDialogTranslations);","import './document_url_dialog/DocumentUrlDialogService';\nimport './document_url_dialog/IDocumentUrlDialogService';\nimport './document_list/DocumentList';\nimport './document_list_edit/DocumentListEdit';\nimport './rest';\nimport './data';\nimport './add_documents/AddDocument';\n\nangular\n    .module('pipDocuments', [\n        'DocumentUrlDialog',\n        'pipAddDocument',        \n        'pipDocuments.Rest',\n        'pipDocuments.Data',\n        'pipDocumentList',\n        'pipDocumentListEdit'\n    ]);\n\nexport * from './document_url_dialog/IDocumentUrlDialogService';\nexport * from './document_list/DocumentList';\nexport * from './document_list_edit/DocumentListEdit';\nexport * from './data';\n","// configured Rest resource\nfunction configDocumentResources(pipRestProvider: pip.rest.IRestProvider) {\n    pipRestProvider.registerPagedCollection('documents', '/api/1.0/blobs/:document_id',\n        { blob_id: '@document_id' },\n        {\n            page: { method: 'GET', isArray: false },\n            update: { method: 'PUT' }\n        });\n    pipRestProvider.registerResource('documentInfo', '/api/1.0/blobs/:document_id/info');\n}\n\nangular\n    .module('pipDocuments.Rest')\n    .config(configDocumentResources);\n\n\n","function configFileResources(pipRestProvider: pip.rest.IRestProvider) {\n    pipRestProvider.registerPagedCollection('files', '/api/1.0/files/:file_id');\n}\n// this.registerRoute('get', '/files', this.getFiles);\n// this.registerRoute('get', '/files/:file_id', this.getFile);\n// this.registerRouteWithAuth('post', '/files', this._auth.admin(), this.createFile);\n// this.registerRouteWithAuth('put', '/files/:file_id', this._auth.admin(), this.updateFile);\n// this.registerRouteWithAuth('del', '/files/:file_id', this._auth.admin(), this.deleteFile);\n\nangular\n    .module('pipDocuments.Rest')\n    .config(configFileResources);\n","\n\nangular\n    .module('pipDocuments.Rest', []);\n\nimport './DocumentResources';\nimport './FileResources';\n","(function(module) {\ntry {\n  module = angular.module('pipDocuments.Templates');\n} catch (e) {\n  module = angular.module('pipDocuments.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('add_documents/AddDocument.html',\n    '<md-menu><ng-transclude class=\"pip-add-image-open-button\" ng-click=\"vm.openMenu($mdOpenMenu)\" xxxng-click=\"vm.ngDisabled() ? \\'\\' : $mdOpenMenu()\"></ng-transclude><md-menu-content width=\"4\"><md-menu-item><md-button class=\"layout-row layout-align-start-center\" accept=\"image/*\" ng-keydown=\"vm.onKeyDown($event)\" ng-multiple=\"vm.isMulti()\" ng-file-select=\"\" ng-file-change=\"vm.onFileChange($files)\" ng-click=\"vm.hideMenu()\" ng-file-drop=\"\"><md-icon class=\"text-headline text-grey rm24-flex\" md-svg-icon=\"icons:folder\"></md-icon><span class=\"text-grey\">{{ ::\\'FILE_DOCUMENTS\\' | translate }}</span></md-button></md-menu-item><md-menu-item><md-button class=\"layout-row layout-align-start-center\" ng-click=\"vm.onWebLinkClick()\"><md-icon class=\"text-headline text-grey rm24-flex\" md-svg-icon=\"icons:weblink\"></md-icon><span class=\"text-grey\">{{ ::\\'WEB_LINK\\' | translate }}</span></md-button></md-menu-item></md-menu-content></md-menu>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDocuments.Templates');\n} catch (e) {\n  module = angular.module('pipDocuments.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('document_list/DocumentList.html',\n    '<md-button class=\"pip-documents-name\" ng-class=\"{\\'lp24-flex rp16\\': $ctrl.pipDocumentIcon }\" ng-click=\"$ctrl.onTitleClick($event); $ctrl.onResize()\" aria-label=\"RESIZE\"><div class=\"layout-align-start-center layout-row w-stretch\"><md-icon md-svg-icon=\"icons:document\" ng-class=\"{\\'pip-icon\\': $ctrl.pipDocumentIcon}\" ng-if=\"$ctrl.pipDocumentIcon\"></md-icon><span class=\"pip-documents-text\">{{ $ctrl.documents.length }} {{ ::\\'DOCUMENTS_ATTACHED\\' | translate }}</span><md-icon class=\"icon-up\" md-svg-icon=\"icons:triangle-up\"></md-icon><md-icon class=\"icon-down\" md-svg-icon=\"icons:triangle-down\"></md-icon></div></md-button><div pip-focused=\"\" class=\"pip-documents-container bm8\" ng-class=\"{ \\'lp24-flex rp24-flex\\': $ctrl.pipDocumentIcon }\"><md-button class=\"pip-document-download md-primary\" ng-if=\"document.uri\" ng-class=\"{\\'pip-focusable\\' : !$ctrl.ngDisabled()}\" href=\"{{ document.uri }}\" target=\"_blank\" ng-disabled=\"$ctrl.ngDisabled() || $ctrl.document.error\" ng-repeat=\"document in $ctrl.documents track by $index\" aria-label=\"DOCUMENT\"><div class=\"pip-default-icon\"><md-icon md-svg-icon=\"icons:{{::$ctrl.documentListIcon}}\"></md-icon></div><div class=\"pip-document-title\">{{ ::document.name }}</div></md-button><md-button class=\"pip-document-download md-primary\" ng-if=\"!document.uri\" ng-class=\"{\\'pip-focusable\\' : !$ctrl.ngDisabled()}\" ng-click=\"$ctrl.onDownload(document)\" target=\"_blank\" ng-disabled=\"$ctrl.ngDisabled() || $ctrl.document.error\" ng-repeat=\"document in $ctrl.documents track by $index\" aria-label=\"DOCUMENT\"><div class=\"pip-default-icon\"><md-icon md-svg-icon=\"icons:{{::$ctrl.documentListIcon}}\"></md-icon></div><div class=\"pip-document-title\">{{ ::document.name }}</div></md-button></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDocuments.Templates');\n} catch (e) {\n  module = angular.module('pipDocuments.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('document_list/DocumentListCollapse.html',\n    '<div class=\"pip-documents-name\" ng-click=\"$ctrl.onTitleClick($event); $ctrl.onResize()\"><span class=\"pip-documents-text\">{{ documents.length }} {{ ::\\'DOCUMENTS_ATTACHED\\' | translate }}</span><md-icon class=\"icon-up\" md-svg-icon=\"icons:triangle-up\"></md-icon><md-icon class=\"icon-down\" md-svg-icon=\"icons:triangle-down\"></md-icon></div><div pip-focused=\"\" class=\"pip-documents-container bm8\"><md-button class=\"pip-document-download pip-focusable md-primary\" href=\"{{::$ctrl.document.url}}\" target=\"_blank\" ng-repeat=\"document in $ctrl.documents track by document.id\" aria-label=\"DOCUMENT\"><div class=\"pip-default-icon\"><md-icon md-svg-icon=\"icons:{{::$ctrl.icon}}\"></md-icon></div><div class=\"pip-document-title\">{{ ::$ctrl.document.name }}</div></md-button></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDocuments.Templates');\n} catch (e) {\n  module = angular.module('pipDocuments.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('document_list_edit/DocumentListEdit.html',\n    '<div pip-focusable=\"\"><div class=\"pip-document-upload pointer md-primary\" ng-class=\"{\\'pip-focusable\\' : !$ctrl.ngDisabled(), \\'pip-item-error\\' : item.state == \\'error\\'}\" ng-keydown=\"$ctrl.onKeyDown($event, item)\" tabindex=\"{{ $ctrl.ngDisabled() ? -1 : 0 }}\" ng-repeat=\"item in $ctrl.control.items | filter: $ctrl.filterItem track by $index\"><div class=\"pip-default-icon\" ng-class=\"{ \\'pip-document-new\\': item.state == \\'added\\' || item.state == \\'copied\\' }\"><md-icon pip-cancel-drag=\"true\" class=\"md-primary\" ng-if=\"item.state == \\'original\\' || item.state == \\'added\\'\" md-svg-icon=\"icons:{{::$ctrl.documentListIcon}}\"></md-icon><md-icon pip-cancel-drag=\"true\" class=\"md-warn\" ng-if=\"item.state == \\'error\\'\" md-svg-icon=\"icons:{{::$ctrl.iconError}}\"></md-icon></div><div class=\"pip-document-title\" pip-cancel-drag=\"true\">{{ item.name }}</div><md-button ng-click=\"$ctrl.onDelete(item)\" ng-disabled=\"$ctrl.isDisabled()\" tabindex=\"-1\" ng-hide=\"$ctrl.ngDisabled()\" class=\"md-icon-button\" aria-label=\"DELETE\"><md-icon md-svg-icon=\"icons:cross\" pip-cancel-drag=\"true\"></md-icon></md-button><md-progress-linear md-mode=\"determinate\" ng-show=\"item.uploading\" ng-value=\"item.progress\"></md-progress-linear></div><button class=\"pip-document-upload pip-document-drop\" ng-class=\"{\\'pip-focusable\\' : !$ctrl.ngDisabled()}\" ng-keydown=\"$ctrl.onKeyDown($event)\" tabindex=\"0\" xxxng-file-drop=\"\" xxxng-file-select=\"\" xxxng-file-change=\"$ctrl.onSelect($files)\" pip-changed=\"$ctrl.readItemLocally(url, file)\" xxng-multiple=\"true\" pip-multi=\"true\" ng-disabled=\"$ctrl.ngDisabled()\" aria-label=\"UPLOAD\" pip-add-document=\"\"><div class=\"pip-default-icon\"><md-icon pip-cancel-drag=\"true\" md-svg-icon=\"icons:{{ ::$ctrl.documentListIcon }}\"></md-icon></div><div class=\"pip-default-text\"><span>{{ $ctrl.documentListText | translate }}</span></div></button><div class=\"clearfix\"></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDocuments.Templates');\n} catch (e) {\n  module = angular.module('pipDocuments.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('document_url_dialog/DocumentUrlDialog.html',\n    '<md-dialog class=\"pip-dialog pip-document-url-dialog pip-document-dialog layout-column\" md-theme=\"{{ $ctrl.theme }}\"><md-dialog-content class=\"pip-body lp0 rp0 tp0 pip-scroll\"><div class=\"pip-header bm16 layout-row layout-align-start-center\"><md-button ng-click=\"$ctrl.onCancelClick()\" class=\"md-icon-button lm0\" aria-label=\"{{ ::\\'CANCEL\\' | translate }}\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:arrow-left\"></md-icon></md-button><h3 class=\"text-title m0\">{{ ::\\'DOCUMENT_FROM_WEBLINK\\' | translate}}</h3></div><div class=\"pip-content lp16 rp16\"><md-input-container md-no-float=\"\" class=\"w-stretch text-subhead1\"><input type=\"text\" ng-model=\"$ctrl.url\" ng-change=\"$ctrl.checkUrl()\" placeholder=\"{{ ::\\'LINK_DOCUMENT\\' | translate }}\"></md-input-container></div></md-dialog-content><div class=\"pip-footer\"><md-button ng-click=\"$ctrl.onCancelClick()\" aria-label=\"{{ ::\\'CANCEL\\' | translate }}\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onAddClick()\" aria-label=\"{{ ::\\'ADD\\' | translate }}\" ng-disabled=\"!$ctrl.matchURI\">{{ ::\\'ADD\\' | translate }}</md-button></div></md-dialog>');\n}]);\n})();\n\n//# sourceMappingURL=pip-suite-documents-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}